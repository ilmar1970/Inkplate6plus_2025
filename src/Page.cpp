#include "Page.h"

// Dummy bitmaps for now
const uint8_t Page::water[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF,
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x70, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x7C, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x7E, 0x00, 0x00,
  0x00, 0x3F, 0x00, 0x00, 0xF8, 0x7F, 0x80, 0x00, 0x00, 0x3E, 0x00, 0x00,
  0xF8, 0x1F, 0xE0, 0x00, 0x00, 0x3E, 0x00, 0x00, 0xF8, 0x0F, 0xF0, 0x00,
  0x00, 0x3E, 0x00, 0x00, 0xF8, 0x03, 0xFC, 0x00, 0x00, 0x3E, 0x00, 0x00,
  0xF8, 0x03, 0xFE, 0x00, 0x00, 0x3E, 0x00, 0x00, 0xF8, 0x03, 0xFE, 0x00,
  0x00, 0x3E, 0x00, 0x00, 0xF8, 0x03, 0xFE, 0x00, 0x00, 0x3E, 0x00, 0x00,
  0xFF, 0xC1, 0xFE, 0x00, 0x00, 0x3E, 0x00, 0x00, 0xFF, 0xF1, 0xFE, 0x00,
  0x00, 0x3E, 0x00, 0x00, 0xFF, 0xF8, 0xFE, 0x00, 0x00, 0x3E, 0x00, 0x00,
  0xFF, 0xF8, 0x3E, 0x00, 0x00, 0x3E, 0x00, 0x00, 0xF8, 0x7C, 0x3E, 0x00,
  0x00, 0x3F, 0x00, 0x01, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF,
  0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00,
  0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x3C, 0x3E, 0x00, 0x00, 0x7F, 0xFF, 0xFF,
  0xFC, 0x3C, 0x3E, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x3E, 0x00,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0xFF,
  0xFF, 0x1F, 0xFC, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xF8, 0x00,
  0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
  0xFF, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
const uint8_t Page::diesel[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE0, 0x3E, 0x03, 0x80, 0x00, 0x00,
  0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF,
  0xFF, 0x80, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00,
  0x00, 0x01, 0xFC, 0x7E, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF,
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xE0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0xFF,
  0x80, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0xFF, 0x80, 0x00, 0x00, 0x00,
  0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x07, 0x3F, 0xFF, 0xFF,
  0xFF, 0xFE, 0x00, 0x00, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x07, 0x3F, 0xFF, 0xFF,
  0xFF, 0xFF, 0x80, 0x00, 0x07, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00,
  0x07, 0x00, 0x1F, 0xFF, 0xF0, 0x3F, 0xC0, 0x00, 0x07, 0x00, 0x07, 0xFF,
  0xC0, 0x1F, 0xC0, 0x00, 0x00, 0x00, 0x01, 0xFF, 0x00, 0x0F, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const int Page::rect_a_x[Page::tankCount] = {100, 280, 684, 864};
const int Page::rect_b_x[Page::tankCount] = {240, 420, 824, 1004};
const int Page::circle_x[Page::tankCount] = {145, 290, 580, 725};
const int Page::rect_a_y = 220;
const int Page::rect_b_y = 480;
const int Page::circle_y = 670;
// Bilge circle positions and radius
const int Page::bilge_x[Page::bilgeCount] = {145, 290, 435, 580, 725, 870};
const int Page::bilge_y[Page::bilgeCount] = {670, 670, 670, 670, 670, 670};

Page::Page(Inkplate& disp) : display(disp) {
    for (int i = 0; i < tankCount; ++i) {
        percent[i] = 0;
        bilgeState[i] = false;
    }
}

void Page::setTank(int idx, int pct) {
    if (idx < 0 || idx >= tankCount) return;
    percent[idx] = pct;
}
void Page::setBilge(int idx, bool state) {
    if (idx < 0 || idx >= bilgeCount) return;
    bilgeState[idx] = state;
}

void Page::draw() {
    // Draw bitmaps (adjust positions as needed)
    display.drawBitmap(230, 65, water, 60, 60, BLACK);
    display.drawBitmap(744, 65, diesel, 60, 60, BLACK);

    // Draw tanks
    for (int i = 0; i < tankCount; ++i) {
        int w = rect_b_x[i] - rect_a_x[i];
        int h = rect_b_y - rect_a_y;
        int fill_h = (h * percent[i]) / 100;
        int fill_y = rect_b_y - fill_h;

        // Draw outlined rectangle
        display.drawRoundRect(rect_a_x[i], rect_a_y, w, h, 8, BLACK);

        // Draw filled black rectangle (percent fill, from bottom up)
        display.fillRect(rect_a_x[i], fill_y, w, fill_h, BLACK);

        // Draw label: just percent + " %"
        String label = String(percent[i]) + " %";
        display.setFont(&FreeSansBold24pt7b);
        display.setTextColor(BLACK, WHITE);
        display.setTextSize(1);
        display.setCursor(rect_a_x[i] + 10, rect_a_y - 10);
        display.print(label);
    }
    // Draw bilge circles
    for (int i = 0; i < bilgeCount; ++i) {
        if (bilgeState[i])
            display.fillCircle(bilge_x[i], bilge_y[i], bilge_radius, BLACK);
        else
            display.drawCircle(bilge_x[i], bilge_y[i], bilge_radius, BLACK);
    }
}